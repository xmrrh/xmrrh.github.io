<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>소셜 게시물 저장소 만들기 on AWS Android Social HoL</title>
    <link>/socialapp/appsync/</link>
    <description>Recent content in 소셜 게시물 저장소 만들기 on AWS Android Social HoL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Tue, 07 Aug 2018 08:30:11 -0700</lastBuildDate>
    
	<atom:link href="/socialapp/appsync/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>저장소 생성 및 API 생성</title>
      <link>/socialapp/appsync/amplify-appsync/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/appsync/amplify-appsync/</guid>
      <description>Amplify를 이용하여 api를 추가합니다.
amplify add api  입력값은 아래 그림을 참고하여 넣습니다. API인가를 위해 Amazon Cognito User Pool을 선택합니다. Amazon Cognito에 가입하고 로그인한 사용자의 경우 AWS 리소스접근에 대한 인가를 부여합니다. Api 접근시에도 인가가 필요한데, 이 인가 방법으로 cognito를 사용한다는 의미입니다.
과정 중 스키마를 입력하는 부분이 나옵니다. amplify init 시 설정하신 에디터가 스키마를 입력하는 단계에서 자동으로 뜹니다.
윈도우 사용자에 경우 선택하신 에디터가 없을 경우가 많습니다. 해당하는 에디터가 없을 경우 스키마 입력 창이 뜨지 않고 amplify add api가 종료되는데, 이 경우 콘솔에 보이는 path로 직접 이동하셔서 직접 아래 스키마를 넣어주세요.</description>
    </item>
    
    <item>
      <title>게시물 작성하기 </title>
      <link>/socialapp/appsync/android-appsync/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/appsync/android-appsync/</guid>
      <description>이제 안드로이드 프로젝트에 게시물 작성 하기 액티비티와 연동해보도록 하겠습니다.
build.gradle (Module: Project) 에 아래와 같이 dependencies에 classpath를 추가 합니다.
classpath &#39;com.amazonaws:aws-android-sdk-appsync-gradle-plugin:2.9.+&#39;  build.gradle (Module: app) 에 plugin을 적용시킵니다. build.gradle (Module: app) 상단에 아래와 같이 복사해서 붙여 넣습니다. 이 plugin에 의해 코드가 자동생성됩니다.
apply plugin: &#39;com.amazonaws.appsync&#39;  또한 같은 파일에 -build.gradle (Module: app)- 에 아래와 같이 dependencies에 4개의 implementation을 추가 합니다.
dependencies { ... implementation &#39;com.amazonaws:aws-android-sdk-appsync:2.9.+&#39; implementation &#39;org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0&#39; implementation &#39;org.eclipse.paho:org.eclipse.paho.android.service:1.1.1&#39; implementation &#39;com.</description>
    </item>
    
    <item>
      <title>IAM 권한 주기</title>
      <link>/socialapp/appsync/s3iam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/socialapp/appsync/s3iam/</guid>
      <description>Write 화면에서 작성된 게시물은 AWS console &amp;gt; service &amp;gt; Dynamodb  에 생성된 table에 추가가 되어 있지 않습니다. 아래 로그로 인해 업로드 되지 않았는데요, 바로 S3에 대한 AccessDenied이 원인입니다.
2019-09-04 11:13:55.305 8048-8081/com.example.socialandroidapp D/EGL_emulation: eglMakeCurrent: 0xe1005300: ver 3 0 (tinfo 0xe10036b0) 2019-09-04 11:13:55.321 8048-8057/com.example.socialandroidapp W/System: A resource failed to call close. 2019-09-04 11:13:55.330 8048-8081/com.example.socialandroidapp D/EGL_emulation: eglMakeCurrent: 0xe1005300: ver 3 0 (tinfo 0xe10036b0) 2019-09-04 11:13:55.334 8048-8081/com.example.socialandroidapp I/chatty: uid=10085(com.example.socialandroidapp) RenderThread identical 1 line 2019-09-04 11:13:55.</description>
    </item>
    
    <item>
      <title>게시물 리스트업하기 </title>
      <link>/socialapp/appsync/android-appsync-query/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/appsync/android-appsync-query/</guid>
      <description>이제 메인 화면에서 사용자가 게시한 화면을 list up 해보도록 하겠습니다.
MainActivity.java 의 onCreate 함수에서 위에서 ClientFactory 이용하여 AWSAppSyncClient를 생성합니다.
아래와 같이 ClientFactory.appSyncInit(&amp;hellip;)를 onCreate()함수내에 복사합니다.
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); checkPermission(); //appsync ClientFactory.appSyncInit(getApplicationContext()); ... }  onResume()에 아래와 같이 queryList()를 호출하도록 코드를 추가합니다.
protected void onResume() { super.onResume(); //appsync queryList(); }  queryList() 함수와 필요한 쿼리 결과를 얻어오는 콜백함수를 아래와 같이 추가합니다.
private PostAdapter mAdapter; public void queryList() { ClientFactory.</description>
    </item>
    
  </channel>
</rss>