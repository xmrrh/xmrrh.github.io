<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>회원관리 기능 구현하기 on AWS Android Social HoL</title>
    <link>/socialapp/cognito/</link>
    <description>Recent content in 회원관리 기능 구현하기 on AWS Android Social HoL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Tue, 07 Aug 2018 08:30:11 -0700</lastBuildDate>
    
	<atom:link href="/socialapp/cognito/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Facebook OAuth 설정하기</title>
      <link>/socialapp/cognito/facebook-config/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/facebook-config/</guid>
      <description>Facebook을 통한 로그인을 지원하기 위해 Facebook 개발자 사이트에 OAuth 관련 설정을 진행해 보겠습니다.
실습에서는 Amazon Cognito가 제공하는 Hosted UI 방식을 이용하여 OAuth2.0 연동을 구성하겠습니다. 이 방식을 이용할 경우 별도의 Facebook SDK 설치 없이 간단한 설정만으로 소셜 인증 기능을 구현하실 수 있습니다.
 Facebook에 개발자 계정을 생성합니다. 자신의 Facebook 계정으로 페이스북에 로그인 한다. My App 메뉴에서 Create App을 선택한다.  Facebook app 이름(AWSAndroidWorkshop)을 입력하고 Create App ID를 선택한다.  좌측 네비게이션 바에서 Settings &amp;gt; Basic을 선택한다.</description>
    </item>
    
    <item>
      <title>Amazon Cognito Service 만들기</title>
      <link>/socialapp/cognito/amplify-cognito/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/amplify-cognito/</guid>
      <description>Amazon Cognito를 사용하면 모바일 앱에 빠르고 손쉽게 사용자 가입, 로그인 및 액세스 제어 기능을 추가할 수 있습니다.
안드로이드 프로젝트 최상위 위치에서 다음 명령을 실행합니다.
amplify add auth  진행 중 선택항목은 아래 그림의 내용을 참고하세요.
domain name 설정 시 aws, amazon, cognito 및 _를 포함한 이름은 사용하실 수 없습니다. &amp;lsquo;android-workshop+랜덤문자&amp;rsquo; 형태로 이름을 입력해주셔야 합니다.
redirect URI는 아래와 같이 입력합니다.
redirect signin URI :
socialdemoapp://callback/  redirect signout URI :
socialdemoapp://signout/  social providers 에서 facebook 선택시 Space bar 를 이용해 선택할 수 있습니다.</description>
    </item>
    
    <item>
      <title>앱 시작 화면 만들기</title>
      <link>/socialapp/cognito/cognito-splash/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/cognito-splash/</guid>
      <description>이번 실습에서는 앱의 시작화면을 구성해 봅니다. 시작화면에서는 Cognito의 로그인 상태를 확인하는 코드가 추가가 됩니다. 기존 로그인 정보가 없는 경우는 로그인 메인 화면으로 이동하고, 로그인 정보가 있는 경우는 앱 메인 화면으로 이동합니다.
아래 코드 부분을 복사하여 _initCognito 메소드를 완성해 봅니다.
// SplashActivity.java public class SplashActivity extends AppCompatActivity { ... private void _initCognito() { // Add code here if (AWSMobileClient.getInstance().getConfiguration() == null){ // Initialize user AWSMobileClient.getInstance().initialize(getApplicationContext(), new Callback&amp;lt;UserStateDetails&amp;gt;() { @Override public void onResult(UserStateDetails userStateDetails) { switch (userStateDetails.</description>
    </item>
    
    <item>
      <title>소셜 로그인 기능 구현하기</title>
      <link>/socialapp/cognito/cognito-auth-social/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/cognito-auth-social/</guid>
      <description>이번 실습에는 Cognito의 Hosted UI 기능을 사용해 페이스북 기반 소셜 로그인 기능을 구현해 보겠습니다.
Hosted UI를 이용하면 OAuth2 인증이 Server to Server로 에 진행되기 때문에 페이스북에서 제공하는 별도의 모바일 SDK를 설치하실 필요는 없습니다. 현재 Hosted UI를 이용해 인증 가능한 Identity Provider는 Facebook, Google, Amazon입니다.
아래 코드를 복사하여 Facebook 로그인을 위한 Hosted UI기능 추가를 위한 _openFacebookLogin 메소드를 완성해 봅니다.
// AuthMainActivity.java public class AuthMainActivity extends AppCompatActivity { ... private void _openFacebookLogin() { // Add code here HostedUIOptions hostedUIOptions = HostedUIOptions.</description>
    </item>
    
    <item>
      <title>이메일 기반 회원 가입 기능 구현하기</title>
      <link>/socialapp/cognito/cognito-auth-email/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/cognito-auth-email/</guid>
      <description>이번 실습에서는 이메일 기반 회원 가입 기능을 구현해 보겠습니다.
실습 시작 전, AWS Conginto 관리 콘솔에 접근해 이메일이 로그인 방법으로 지정되어 있는지 확인해보도록 하겠습니다. AWS 관리 콘솔의 Attributes 항목의 내용이 아래 그림과 같이 설정되어 있는지 확인합니다. 이제 단계별로 이메일 기반 회원 가입을 위한 코드를 완성해 보겠습니다.
 입력받은 이메일, 비밀번호를 이용해 회원 가입을 진행. 아래 코드를 복사하여 회원 가입을 위한 signUp 메소드를 완성합니다. signUp 메소드에서는 입력받은 이메일과 비밀번호로 Cognito user pool에 새로운 사용자를 추가합니다.</description>
    </item>
    
    <item>
      <title>이메일 기반 로그인 기능 구현하기</title>
      <link>/socialapp/cognito/cognito-auth-login/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/cognito-auth-login/</guid>
      <description>이번 실습에서는 이메일 기반 로그인 기능을 구현해 보겠습니다.
아래 코드를 복사하여 이메일 기반 로그인을 수행하는 _signIn 메소드를 완성합니다.
// LoginActivity.java public class LoginActivity extends AppCompatActivity implements Validator.ValidationListener { ... private void _signIn(String userName, String password) { AWSMobileClient.getInstance().signIn(userName, password, null, new Callback&amp;lt;SignInResult&amp;gt;() { @Override public void onResult(final SignInResult signInResult) { runOnUiThread(() -&amp;gt; { Log.d(TAG, &amp;quot;Sign-in callback state: &amp;quot; + signInResult.getSignInState()); switch (signInResult.getSignInState()) { case DONE: makeToast(context,&amp;quot;Sign-in done.&amp;quot;); CommonAction.openMain(context); break; case SMS_MFA: makeToast(context, &amp;quot;Please confirm sign-in with SMS.</description>
    </item>
    
  </channel>
</rss>