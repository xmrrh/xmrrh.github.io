<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>회원관리 기능 구현하기 on AWS Android Social HoL</title>
    <link>/socialapp/cognito/</link>
    <description>Recent content in 회원관리 기능 구현하기 on AWS Android Social HoL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Tue, 07 Aug 2018 08:30:11 -0700</lastBuildDate>
    
	<atom:link href="/socialapp/cognito/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Facebook OAuth 설정하기</title>
      <link>/socialapp/cognito/facebook-config/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/facebook-config/</guid>
      <description>Facebook을 통한 로그인을 지원하기 위해 Facebook 개발자 사이트에 OAuth 관련 설정을 진행해 보겠습니다.
실습에서는 Amazon Cognito가 제공하는 Hosted UI 방식을 이용하여 OAuth2.0 연동을 구성하겠습니다. 이 방식을 이용할 경우 별도의 Facebook SDK 설치 없이 간단한 설정만으로 소셜 인증 기능을 구현하실 수 있습니다.
 Facebook에 개발자 계정을 생성합니다. 자신의 Facebook 계정으로 페이스북에 로그인 한다. My App 메뉴에서 Add New App을 선택한다.  Facebook app 이름(AWSAndroidWorkshop)을 입력하고 Create App ID를 선택한다.  좌측 네비게이션 바에서 Settings &amp;gt; Basic을 선택한다.</description>
    </item>
    
    <item>
      <title>Amazon Cognito Service 만들기</title>
      <link>/socialapp/cognito/amplify-cognito/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/amplify-cognito/</guid>
      <description>Amazon Cognito를 사용하면 모바일 앱에 빠르고 손쉽게 사용자 가입, 로그인 및 액세스 제어 기능을 추가할 수 있습니다.
안드로이드 프로젝트 최상위 위치에서 다음 명령을 실행합니다.
amplify add auth  진행 중 선택항목은 아래 그림을 참고하세요.
domain name 설정 시 aws, amazon, cognito 및 _를 포함한 이름은 사용하실 수 없습니다. &amp;lsquo;android-workshop+랜덤문자&amp;rsquo; 형태로 이름을 입력해주셔야 합니다.
redirect URI는 아래와 같이 입력하십시요.
redirect signin URI :
socialdemoapp://callback/  redirect signout URI :
socialdemoapp://signout/  social providers 에서 facebook 선택시 Space bar 를 이용하셔서 체크하셔야 합니다.</description>
    </item>
    
    <item>
      <title>앱 시작 화면 만들기</title>
      <link>/socialapp/cognito/cognito-splash/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/cognito-splash/</guid>
      <description>다음과 같은 형태의 앱 시작화면을 구성해보도록 하겠습니다. 시작화면에서는 Cognito의 로그인 상태를 확인하는 코드가 추가가 됩니다. 로그인 정보가 있는 경우 앱 메인 화면으로 이동하게 됩니다. 로그인 정보가 없는 경우는 로그인 메인 화면으로 이동하게 됩니다.
// SplashActivity.java public class SplashActivity extends AppCompatActivity { ... @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_splash); context = this; _initCognito(); } private void _initCognito() { AWSMobileClient.getInstance().initialize(getApplicationContext(), new Callback&amp;lt;UserStateDetails&amp;gt;() { @Override public void onResult(UserStateDetails userStateDetails) { switch (userStateDetails.</description>
    </item>
    
    <item>
      <title>소셜 로그인 기능 구현하기</title>
      <link>/socialapp/cognito/cognito-auth-social/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/cognito-auth-social/</guid>
      <description>인증 메인화면에는 소셜 로그인(페이스북, Google)을 위한 버튼과 이메일 기반의 로그인 및 회원 가입을 위한 링크가 제공 됩니다. 소셜 로그인의 경우 Cognito의 Hosted UI 기능을 사용해 서버간 OAuth2 인증이 이루어지고 User Pool에 등록도 자동으로 처리됩니다. 별도의 Identity Provider의 SDK를 설치하실 필요 없습니다.
// AuthMainActivity.java public class AuthMainActivity extends AppCompatActivity { private static final String TAG = AuthMainActivity.class.getSimpleName(); private Context context; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_auth_main); context = this; } public void openLogin(View view) { Intent intent = new Intent(context, LoginActivity.</description>
    </item>
    
    <item>
      <title>이메일 기반 회원 가입 기능 구현하기</title>
      <link>/socialapp/cognito/cognito-auth-email/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/cognito-auth-email/</guid>
      <description>이메일 기반 로그인 기능은 회원 가입 메뉴와 이메일 기반 로그인 메뉴로 구성됩니다.
우선 회원 가입 기능을 구현해 보겠습니다. 이전 실습에서 amplify add auth 명령 실행 시 Email을 로그인 수단으로 설정하였습니다. AWS 관리 콘솔의 Attributes 항목을 확인 해보면 아래 그림과 같이 이메일이 로그인 수단으로 설정된 것을 확인할 수 있습니다. 회원 가입을 위한 안드로이드 UI는 다음과 같이 구성되어 있습니다.
회원 가입은 다음과 같은 단계로 진행됩니다.
 이메일, 비밀번호를 입력하여 Signup을 진행합니다. Signup과 관련된 코드는 다음과 같습니다.</description>
    </item>
    
    <item>
      <title>이메일 기반 로그인 기능 구현하기</title>
      <link>/socialapp/cognito/cognito-auth-login/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/cognito-auth-login/</guid>
      <description>이번 실습에서는 이메일 기반 로그인 기능을 구현해 보겠습니다.
이메일 기반 로그인을 위한 안드로이드 UI는 다음과 같이 구성되어 있습니다. 로그인과 관련된 코드는 다음과 같습니다.
// LoginActivity.java public class LoginActivity extends AppCompatActivity implements Validator.ValidationListener { ... private void _signIn(String userName, String password) { AWSMobileClient.getInstance().signIn(userName, password, null, new Callback&amp;lt;SignInResult&amp;gt;() { @Override public void onResult(final SignInResult signInResult) { runOnUiThread(() -&amp;gt; { Log.d(TAG, &amp;quot;Sign-in callback state: &amp;quot; + signInResult.getSignInState()); switch (signInResult.getSignInState()) { case DONE: makeToast(context,&amp;quot;Sign-in done.</description>
    </item>
    
  </channel>
</rss>